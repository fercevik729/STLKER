// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	models "github.com/fercevik729/STLKER/control/models"
	mock "github.com/stretchr/testify/mock"
)

// ISecurityRepository is an autogenerated mock type for the ISecurityRepository type
type ISecurityRepository struct {
	mock.Mock
}

// CreateSecurity provides a mock function with given fields: security
func (_m *ISecurityRepository) CreateSecurity(security models.Security) {
	_m.Called(security)
}

// DeleteSecurity provides a mock function with given fields: ticker, portId
func (_m *ISecurityRepository) DeleteSecurity(ticker string, portId uint) {
	_m.Called(ticker, portId)
}

// Exists provides a mock function with given fields: portfolio, ticker
func (_m *ISecurityRepository) Exists(portfolio uint, ticker string) bool {
	ret := _m.Called(portfolio, ticker)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint, string) bool); ok {
		r0 = rf(portfolio, ticker)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetSecurity provides a mock function with given fields: portId, ticker
func (_m *ISecurityRepository) GetSecurity(portId uint, ticker string) models.Security {
	ret := _m.Called(portId, ticker)

	var r0 models.Security
	if rf, ok := ret.Get(0).(func(uint, string) models.Security); ok {
		r0 = rf(portId, ticker)
	} else {
		r0 = ret.Get(0).(models.Security)
	}

	return r0
}

// UpdateSecurity provides a mock function with given fields: security
func (_m *ISecurityRepository) UpdateSecurity(security models.Security) {
	_m.Called(security)
}

// NewISecurityRepository creates a new instance of ISecurityRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISecurityRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISecurityRepository {
	mock := &ISecurityRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
