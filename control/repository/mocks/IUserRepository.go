// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	models "github.com/fercevik729/STLKER/control/models"
	mock "github.com/stretchr/testify/mock"
)

// IUserRepository is an autogenerated mock type for the IUserRepository type
type IUserRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *IUserRepository) CreateUser(user models.User) {
	_m.Called(user)
}

// DeleteUser provides a mock function with given fields: username
func (_m *IUserRepository) DeleteUser(username string) {
	_m.Called(username)
}

// GetUser provides a mock function with given fields: username
func (_m *IUserRepository) GetUser(username string) models.User {
	ret := _m.Called(username)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	return r0
}

// NewIUserRepository creates a new instance of IUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserRepository {
	mock := &IUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
