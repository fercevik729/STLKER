// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	models "github.com/fercevik729/STLKER/control/models"
	mock "github.com/stretchr/testify/mock"
)

// IPortfolioRepository is an autogenerated mock type for the IPortfolioRepository type
type IPortfolioRepository struct {
	mock.Mock
}

// CreateNewPortfolio provides a mock function with given fields: portfolio
func (_m *IPortfolioRepository) CreateNewPortfolio(portfolio models.Portfolio) error {
	ret := _m.Called(portfolio)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Portfolio) error); ok {
		r0 = rf(portfolio)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePortfolio provides a mock function with given fields: portName, username
func (_m *IPortfolioRepository) DeletePortfolio(portName string, username string) error {
	ret := _m.Called(portName, username)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(portName, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllPortfolios provides a mock function with given fields: username
func (_m *IPortfolioRepository) GetAllPortfolios(username string) []models.Portfolio {
	ret := _m.Called(username)

	var r0 []models.Portfolio
	if rf, ok := ret.Get(0).(func(string) []models.Portfolio); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Portfolio)
		}
	}

	return r0
}

// GetAllPortfoliosAdmin provides a mock function with given fields:
func (_m *IPortfolioRepository) GetAllPortfoliosAdmin() map[string][]string {
	ret := _m.Called()

	var r0 map[string][]string
	if rf, ok := ret.Get(0).(func() map[string][]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]string)
		}
	}

	return r0
}

// GetPortfolio provides a mock function with given fields: portName, username
func (_m *IPortfolioRepository) GetPortfolio(portName string, username string) (models.Portfolio, error) {
	ret := _m.Called(portName, username)

	var r0 models.Portfolio
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (models.Portfolio, error)); ok {
		return rf(portName, username)
	}
	if rf, ok := ret.Get(0).(func(string, string) models.Portfolio); ok {
		r0 = rf(portName, username)
	} else {
		r0 = ret.Get(0).(models.Portfolio)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(portName, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPortfolioId provides a mock function with given fields: portName, username
func (_m *IPortfolioRepository) GetPortfolioId(portName string, username string) uint {
	ret := _m.Called(portName, username)

	var r0 uint
	if rf, ok := ret.Get(0).(func(string, string) uint); ok {
		r0 = rf(portName, username)
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// UpdatePortfolio provides a mock function with given fields: portfolio
func (_m *IPortfolioRepository) UpdatePortfolio(portfolio models.Portfolio) error {
	ret := _m.Called(portfolio)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Portfolio) error); ok {
		r0 = rf(portfolio)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIPortfolioRepository creates a new instance of IPortfolioRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPortfolioRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPortfolioRepository {
	mock := &IPortfolioRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
