// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: protos/watcher.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Currencies is the enum which represents the allowed currencies for the API
// USD is the default currency
type Currencies int32

const (
	Currencies_USD Currencies = 0
	Currencies_EUR Currencies = 1
	Currencies_JPY Currencies = 2
	Currencies_BGN Currencies = 3
	Currencies_CZK Currencies = 4
	Currencies_DKK Currencies = 5
	Currencies_GBP Currencies = 6
	Currencies_HUF Currencies = 7
	Currencies_PLN Currencies = 8
	Currencies_RON Currencies = 9
	Currencies_SEK Currencies = 10
	Currencies_CHF Currencies = 11
	Currencies_ISK Currencies = 12
	Currencies_NOK Currencies = 13
	Currencies_HRK Currencies = 14
	Currencies_RUB Currencies = 15
	Currencies_TRY Currencies = 16
	Currencies_AUD Currencies = 17
	Currencies_BRL Currencies = 18
	Currencies_CAD Currencies = 19
	Currencies_CNY Currencies = 20
	Currencies_HKD Currencies = 21
	Currencies_IDR Currencies = 22
	Currencies_ILS Currencies = 23
	Currencies_INR Currencies = 24
	Currencies_KRW Currencies = 25
	Currencies_MXN Currencies = 26
	Currencies_MYR Currencies = 27
	Currencies_NZD Currencies = 28
	Currencies_PHP Currencies = 29
	Currencies_SGD Currencies = 30
	Currencies_THB Currencies = 31
	Currencies_ZAR Currencies = 32
)

// Enum value maps for Currencies.
var (
	Currencies_name = map[int32]string{
		0:  "USD",
		1:  "EUR",
		2:  "JPY",
		3:  "BGN",
		4:  "CZK",
		5:  "DKK",
		6:  "GBP",
		7:  "HUF",
		8:  "PLN",
		9:  "RON",
		10: "SEK",
		11: "CHF",
		12: "ISK",
		13: "NOK",
		14: "HRK",
		15: "RUB",
		16: "TRY",
		17: "AUD",
		18: "BRL",
		19: "CAD",
		20: "CNY",
		21: "HKD",
		22: "IDR",
		23: "ILS",
		24: "INR",
		25: "KRW",
		26: "MXN",
		27: "MYR",
		28: "NZD",
		29: "PHP",
		30: "SGD",
		31: "THB",
		32: "ZAR",
	}
	Currencies_value = map[string]int32{
		"USD": 0,
		"EUR": 1,
		"JPY": 2,
		"BGN": 3,
		"CZK": 4,
		"DKK": 5,
		"GBP": 6,
		"HUF": 7,
		"PLN": 8,
		"RON": 9,
		"SEK": 10,
		"CHF": 11,
		"ISK": 12,
		"NOK": 13,
		"HRK": 14,
		"RUB": 15,
		"TRY": 16,
		"AUD": 17,
		"BRL": 18,
		"CAD": 19,
		"CNY": 20,
		"HKD": 21,
		"IDR": 22,
		"ILS": 23,
		"INR": 24,
		"KRW": 25,
		"MXN": 26,
		"MYR": 27,
		"NZD": 28,
		"PHP": 29,
		"SGD": 30,
		"THB": 31,
		"ZAR": 32,
	}
)

func (x Currencies) Enum() *Currencies {
	p := new(Currencies)
	*p = x
	return p
}

func (x Currencies) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Currencies) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_watcher_proto_enumTypes[0].Descriptor()
}

func (Currencies) Type() protoreflect.EnumType {
	return &file_protos_watcher_proto_enumTypes[0]
}

func (x Currencies) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Currencies.Descriptor instead.
func (Currencies) EnumDescriptor() ([]byte, []int) {
	return file_protos_watcher_proto_rawDescGZIP(), []int{0}
}

type TickerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker      string     `protobuf:"bytes,1,opt,name=Ticker,proto3" json:"Ticker,omitempty"`
	Destination Currencies `protobuf:"varint,2,opt,name=Destination,proto3,enum=Currencies" json:"Destination,omitempty"`
}

func (x *TickerRequest) Reset() {
	*x = TickerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_watcher_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickerRequest) ProtoMessage() {}

func (x *TickerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_watcher_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickerRequest.ProtoReflect.Descriptor instead.
func (*TickerRequest) Descriptor() ([]byte, []int) {
	return file_protos_watcher_proto_rawDescGZIP(), []int{0}
}

func (x *TickerRequest) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *TickerRequest) GetDestination() Currencies {
	if x != nil {
		return x.Destination
	}
	return Currencies_USD
}

type TickerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol        string `protobuf:"bytes,1,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Open          string `protobuf:"bytes,2,opt,name=Open,proto3" json:"Open,omitempty"`
	High          string `protobuf:"bytes,3,opt,name=High,proto3" json:"High,omitempty"`
	Low           string `protobuf:"bytes,4,opt,name=Low,proto3" json:"Low,omitempty"`
	Price         string `protobuf:"bytes,5,opt,name=Price,proto3" json:"Price,omitempty"`
	Volume        string `protobuf:"bytes,6,opt,name=Volume,proto3" json:"Volume,omitempty"`
	LTD           string `protobuf:"bytes,7,opt,name=LTD,proto3" json:"LTD,omitempty"`
	PrevClose     string `protobuf:"bytes,8,opt,name=PrevClose,proto3" json:"PrevClose,omitempty"`
	Change        string `protobuf:"bytes,9,opt,name=Change,proto3" json:"Change,omitempty"`
	PercentChange string `protobuf:"bytes,10,opt,name=PercentChange,proto3" json:"PercentChange,omitempty"`
}

func (x *TickerResponse) Reset() {
	*x = TickerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_watcher_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickerResponse) ProtoMessage() {}

func (x *TickerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_watcher_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickerResponse.ProtoReflect.Descriptor instead.
func (*TickerResponse) Descriptor() ([]byte, []int) {
	return file_protos_watcher_proto_rawDescGZIP(), []int{1}
}

func (x *TickerResponse) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TickerResponse) GetOpen() string {
	if x != nil {
		return x.Open
	}
	return ""
}

func (x *TickerResponse) GetHigh() string {
	if x != nil {
		return x.High
	}
	return ""
}

func (x *TickerResponse) GetLow() string {
	if x != nil {
		return x.Low
	}
	return ""
}

func (x *TickerResponse) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *TickerResponse) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

func (x *TickerResponse) GetLTD() string {
	if x != nil {
		return x.LTD
	}
	return ""
}

func (x *TickerResponse) GetPrevClose() string {
	if x != nil {
		return x.PrevClose
	}
	return ""
}

func (x *TickerResponse) GetChange() string {
	if x != nil {
		return x.Change
	}
	return ""
}

func (x *TickerResponse) GetPercentChange() string {
	if x != nil {
		return x.PercentChange
	}
	return ""
}

type CompanyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker            string `protobuf:"bytes,1,opt,name=Ticker,proto3" json:"Ticker,omitempty"`
	Name              string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Exchange          string `protobuf:"bytes,3,opt,name=Exchange,proto3" json:"Exchange,omitempty"`
	Sector            string `protobuf:"bytes,4,opt,name=Sector,proto3" json:"Sector,omitempty"`
	MarketCap         string `protobuf:"bytes,5,opt,name=MarketCap,proto3" json:"MarketCap,omitempty"`
	PERatio           string `protobuf:"bytes,6,opt,name=PERatio,proto3" json:"PERatio,omitempty"`
	PEGRatio          string `protobuf:"bytes,7,opt,name=PEGRatio,proto3" json:"PEGRatio,omitempty"`
	DivPerShare       string `protobuf:"bytes,8,opt,name=DivPerShare,proto3" json:"DivPerShare,omitempty"`
	EPS               string `protobuf:"bytes,9,opt,name=EPS,proto3" json:"EPS,omitempty"`
	RevPerShare       string `protobuf:"bytes,10,opt,name=RevPerShare,proto3" json:"RevPerShare,omitempty"`
	ProfitMargin      string `protobuf:"bytes,11,opt,name=ProfitMargin,proto3" json:"ProfitMargin,omitempty"`
	YearHigh          string `protobuf:"bytes,12,opt,name=YearHigh,proto3" json:"YearHigh,omitempty"`
	YearLow           string `protobuf:"bytes,13,opt,name=YearLow,proto3" json:"YearLow,omitempty"`
	SharesOutstanding string `protobuf:"bytes,14,opt,name=SharesOutstanding,proto3" json:"SharesOutstanding,omitempty"`
	PriceToBookRatio  string `protobuf:"bytes,15,opt,name=PriceToBookRatio,proto3" json:"PriceToBookRatio,omitempty"`
	Beta              string `protobuf:"bytes,16,opt,name=Beta,proto3" json:"Beta,omitempty"`
}

func (x *CompanyResponse) Reset() {
	*x = CompanyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_watcher_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyResponse) ProtoMessage() {}

func (x *CompanyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_watcher_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyResponse.ProtoReflect.Descriptor instead.
func (*CompanyResponse) Descriptor() ([]byte, []int) {
	return file_protos_watcher_proto_rawDescGZIP(), []int{2}
}

func (x *CompanyResponse) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *CompanyResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CompanyResponse) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *CompanyResponse) GetSector() string {
	if x != nil {
		return x.Sector
	}
	return ""
}

func (x *CompanyResponse) GetMarketCap() string {
	if x != nil {
		return x.MarketCap
	}
	return ""
}

func (x *CompanyResponse) GetPERatio() string {
	if x != nil {
		return x.PERatio
	}
	return ""
}

func (x *CompanyResponse) GetPEGRatio() string {
	if x != nil {
		return x.PEGRatio
	}
	return ""
}

func (x *CompanyResponse) GetDivPerShare() string {
	if x != nil {
		return x.DivPerShare
	}
	return ""
}

func (x *CompanyResponse) GetEPS() string {
	if x != nil {
		return x.EPS
	}
	return ""
}

func (x *CompanyResponse) GetRevPerShare() string {
	if x != nil {
		return x.RevPerShare
	}
	return ""
}

func (x *CompanyResponse) GetProfitMargin() string {
	if x != nil {
		return x.ProfitMargin
	}
	return ""
}

func (x *CompanyResponse) GetYearHigh() string {
	if x != nil {
		return x.YearHigh
	}
	return ""
}

func (x *CompanyResponse) GetYearLow() string {
	if x != nil {
		return x.YearLow
	}
	return ""
}

func (x *CompanyResponse) GetSharesOutstanding() string {
	if x != nil {
		return x.SharesOutstanding
	}
	return ""
}

func (x *CompanyResponse) GetPriceToBookRatio() string {
	if x != nil {
		return x.PriceToBookRatio
	}
	return ""
}

func (x *CompanyResponse) GetBeta() string {
	if x != nil {
		return x.Beta
	}
	return ""
}

var File_protos_watcher_proto protoreflect.FileDescriptor

var file_protos_watcher_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x56, 0x0a, 0x0d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12,
	0x2d, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfe,
	0x01, 0x0a, 0x0e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x4f, 0x70, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x48, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x69, 0x67,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x4c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x54, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x4c, 0x54, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x76, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x65, 0x76, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0xe3, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x45, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x50, 0x45, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x45, 0x47, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50,
	0x45, 0x47, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x69, 0x76, 0x50, 0x65,
	0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x69,
	0x76, 0x50, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x50, 0x53,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x50, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x52,
	0x65, 0x76, 0x50, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x52, 0x65, 0x76, 0x50, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x59, 0x65, 0x61, 0x72, 0x48, 0x69, 0x67, 0x68, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x59, 0x65, 0x61, 0x72, 0x48, 0x69, 0x67, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x59, 0x65, 0x61, 0x72, 0x4c, 0x6f, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x59, 0x65, 0x61, 0x72, 0x4c, 0x6f, 0x77, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x6f,
	0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x42, 0x65, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x42, 0x65, 0x74, 0x61, 0x2a, 0xb5, 0x02, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x53, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x45, 0x55, 0x52, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x50, 0x59, 0x10, 0x02, 0x12,
	0x07, 0x0a, 0x03, 0x42, 0x47, 0x4e, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x5a, 0x4b, 0x10,
	0x04, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4b, 0x4b, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x42,
	0x50, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x55, 0x46, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03,
	0x50, 0x4c, 0x4e, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x07,
	0x0a, 0x03, 0x53, 0x45, 0x4b, 0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x48, 0x46, 0x10, 0x0b,
	0x12, 0x07, 0x0a, 0x03, 0x49, 0x53, 0x4b, 0x10, 0x0c, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x4f, 0x4b,
	0x10, 0x0d, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x52, 0x4b, 0x10, 0x0e, 0x12, 0x07, 0x0a, 0x03, 0x52,
	0x55, 0x42, 0x10, 0x0f, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x52, 0x59, 0x10, 0x10, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x55, 0x44, 0x10, 0x11, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x52, 0x4c, 0x10, 0x12, 0x12,
	0x07, 0x0a, 0x03, 0x43, 0x41, 0x44, 0x10, 0x13, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4e, 0x59, 0x10,
	0x14, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x4b, 0x44, 0x10, 0x15, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x44,
	0x52, 0x10, 0x16, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4c, 0x53, 0x10, 0x17, 0x12, 0x07, 0x0a, 0x03,
	0x49, 0x4e, 0x52, 0x10, 0x18, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x52, 0x57, 0x10, 0x19, 0x12, 0x07,
	0x0a, 0x03, 0x4d, 0x58, 0x4e, 0x10, 0x1a, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x59, 0x52, 0x10, 0x1b,
	0x12, 0x07, 0x0a, 0x03, 0x4e, 0x5a, 0x44, 0x10, 0x1c, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x48, 0x50,
	0x10, 0x1d, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x47, 0x44, 0x10, 0x1e, 0x12, 0x07, 0x0a, 0x03, 0x54,
	0x48, 0x42, 0x10, 0x1f, 0x12, 0x07, 0x0a, 0x03, 0x5a, 0x41, 0x52, 0x10, 0x20, 0x32, 0x9b, 0x01,
	0x0a, 0x07, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x4d, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x10, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x0e, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x2b, 0x5a, 0x29, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x65, 0x72, 0x63, 0x65, 0x76,
	0x69, 0x6b, 0x37, 0x32, 0x39, 0x2f, 0x53, 0x54, 0x4c, 0x4b, 0x45, 0x52, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_watcher_proto_rawDescOnce sync.Once
	file_protos_watcher_proto_rawDescData = file_protos_watcher_proto_rawDesc
)

func file_protos_watcher_proto_rawDescGZIP() []byte {
	file_protos_watcher_proto_rawDescOnce.Do(func() {
		file_protos_watcher_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_watcher_proto_rawDescData)
	})
	return file_protos_watcher_proto_rawDescData
}

var file_protos_watcher_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protos_watcher_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_protos_watcher_proto_goTypes = []interface{}{
	(Currencies)(0),         // 0: Currencies
	(*TickerRequest)(nil),   // 1: TickerRequest
	(*TickerResponse)(nil),  // 2: TickerResponse
	(*CompanyResponse)(nil), // 3: CompanyResponse
}
var file_protos_watcher_proto_depIdxs = []int32{
	0, // 0: TickerRequest.Destination:type_name -> Currencies
	1, // 1: Watcher.GetInfo:input_type -> TickerRequest
	1, // 2: Watcher.MoreInfo:input_type -> TickerRequest
	1, // 3: Watcher.SubscribeTicker:input_type -> TickerRequest
	2, // 4: Watcher.GetInfo:output_type -> TickerResponse
	3, // 5: Watcher.MoreInfo:output_type -> CompanyResponse
	2, // 6: Watcher.SubscribeTicker:output_type -> TickerResponse
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_protos_watcher_proto_init() }
func file_protos_watcher_proto_init() {
	if File_protos_watcher_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_watcher_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_watcher_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_watcher_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_watcher_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_watcher_proto_goTypes,
		DependencyIndexes: file_protos_watcher_proto_depIdxs,
		EnumInfos:         file_protos_watcher_proto_enumTypes,
		MessageInfos:      file_protos_watcher_proto_msgTypes,
	}.Build()
	File_protos_watcher_proto = out.File
	file_protos_watcher_proto_rawDesc = nil
	file_protos_watcher_proto_goTypes = nil
	file_protos_watcher_proto_depIdxs = nil
}
